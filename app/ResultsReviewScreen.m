classdef ResultsReviewScreen < handle
    %RESULTSREVIEW Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        ui;
        session;
        ssm;
        dataFocus = 'scoredImages';
        sessionData;
        sessionDataForTaxa;
        resultMatrixColumn;
        imageControlTags = {};
        metadataControlTags = {};
        heightRatio;
        matrixHeight;
        
        javaTaxaScrollPane;
        javaTaxaConfidenceSlider;
        javaConfidenceLabel;
    end
    
    methods
        function obj = ResultsReviewScreen(ui, session)
            obj.ui = ui;
            obj.session = session;
        end
        function reset(obj)
            obj.ssm = obj.session.scoredSetMetadata;
            obj.ssm.loadAll();
            key = obj.ssm.getCurrentKey();
            matrixOfMostRecentRun = char(obj.ssm.getMatrixNameFromKey(obj.ssm.getCurrentKey()));
            obj.session.matrixChoiceScreen.registerMatrixChoice(matrixOfMostRecentRun);
            obj.sessionData = obj.ssm.getSessionResultsData(obj.session.morphobankBundle);
        end
        function showResults(obj)
            
            obj.ui.deleteObsoleteControls();
            obj.ui.createResultsReviewPanels();
            % create panel for instructions
		
            scoredSetPrompt = uicontrol('style', 'text' ,...
                                         'Parent',obj.ui.scoredSetTitlePanel,...
                                         'Units','normalized',...
                                         'String', 'Select run results.' ,...
                                         'position', [0,0,1,0.6] ,...
                                         'FontName', obj.ui.fontname ,...
                                         'FontSize', obj.ui.fontsize ,...
                                         'Tag','scoredSetPrompt' ,...
                                         'Background',[1 1 1],...
                                         'HorizontalAlignment', 'left');%'BackgroundColor', [0.1 1 0.1] ,...
                                     
            obj.ui.activeControlTags = { 'scoredSetPrompt' }
            scoredImagesValue = 0;
            unscoredImagesValue = 0;
            trainingValue = 0; 
            
            if obj.sessionData.isFocusScoredImages()
                scoredImagesValue = 1;
            elseif obj.sessionData.isFocusUnscoredImages()
                unscoredImagesValue = 1;
            else
                trainingValue = 1; 
            end
            % create panel for training vs results showing
            buttonGroup = uibuttongroup('Visible','on',...
                                        'Tag','buttonGroup',...
                                        'BorderType','none',...
                                        'Background','white',...
                                        'Parent',obj.ui.checkboxPanePanel,...
                                        'Position',[0 0 1 1]);
            
            obj.ui.activeControlTags = [ obj.ui.activeControlTags, 'buttonGroup' ];    
            scoredImagesRadio = uicontrol('Style','radiobutton',...
                                     'visible', 'on',...
                                     'String','scored' ,...
                                     'Background', 'white' ,...
                                     'Units', 'normalized',...
                                     'Value',scoredImagesValue,...
                                     'Position',[0, 0, 0.3, 1.0],...
                                     'Parent',buttonGroup,...
                                     'FontName', obj.ui.fontname ,...
                                     'FontSize', obj.ui.fontsize ,...
                                     'Tag', 'scoredImagesRadio',...
                                     'HandleVisibility', 'off');
   
            unscoredImagesRadio = uicontrol('Style','radiobutton',...
                                     'visible', 'on',...
                                     'String','unscored' ,...
                                     'Background', 'white' ,...
                                     'Units', 'normalized',...
                                     'Value',unscoredImagesValue,...
                                     'Position',[0.35, 0, 0.3, 1.0],...
                                     'Parent',buttonGroup,...
                                     'FontName', obj.ui.fontname ,...
                                     'FontSize', obj.ui.fontsize ,...
                                     'Tag', 'unscoredImagesRadio',...
                                     'HandleVisibility', 'off');
            %obj.ui.activeControlTags = [ obj.ui.activeControlTags, 'resultsRadio' ];
            trainingImagesRadio = uicontrol('Style','radiobutton',...
                                     'visible', 'on',...
                                     'String','training' ,...
                                     'Background', 'white' ,...
                                     'Units', 'normalized',...
                                     'Value',trainingValue,...
                                     'Position',[0.7, 0, 0.3, 1.0],...
                                     'Parent',buttonGroup,...
                                     'FontName', obj.ui.fontname ,...
                                     'FontSize', obj.ui.fontsize ,...
                                     'Tag', 'trainingImagesRadio',...
                                     'HandleVisibility', 'off');

            %obj.ui.activeControlTags = [ obj.ui.activeControlTags, 'trainingImagesRadio' ];
            % create panel for images//
		
            
            doAnotherCharacter = uicontrol('style', 'pushbutton' ,...
                                         'String', 'Try another character' ,...
                                         'Parent',obj.ui.navigationPanel,...
                                         'Units', 'normalized',...
                                         'position', obj.ui.getButtonPositionLeft() ,...
                                         'FontName', obj.ui.fontname ,...
                                         'FontSize', obj.ui.fontsize ,...
                                         'Tag','doAnotherCharacter' ,...
                                         'BackgroundColor', [0.5 0.5 0.5]);  
            obj.ui.activeControlTags = [ obj.ui.activeControlTags, 'doAnotherCharacter' ];
            
            exit = uicontrol('style', 'pushbutton' ,...
                                         'Parent',obj.ui.navigationPanel,...
                                         'Units','normalized',...
                                         'String', 'Exit' ,...
                                         'position', obj.ui.getButtonPositionRightB() ,...
                                         'FontName', obj.ui.fontname ,...
                                         'FontSize', obj.ui.fontsize ,...
                                         'Tag','exit' ,...
                                         'BackgroundColor', [0.5 0.5 0.5]);  
            obj.ui.activeControlTags = [ obj.ui.activeControlTags, 'exit' ];
          
           
            obj.loadMetadataWidgets();
            obj.loadImageWidgets();
            %
            %
            % ???????? obj.ui.activeAnswerControl = obj.taxonChoiceWidget;
            obj.session.activeQuestionId = 'ResultsReview';
            obj.ui.activeControlType = 'ResultsReview';

            set(exit, 'callback', {@obj.exit});
            set(doAnotherCharacter, 'callback', {@obj.doAnotherCharacter});
            set(scoredImagesRadio, 'callback', {@obj.setFocusToScored});
            set(unscoredImagesRadio, 'callback', {@obj.setFocusToUnscored});
            set(trainingImagesRadio, 'callback', {@obj.setFocusToTraining});
            obj.session.mostRecentScreen = 'RESULTS_REVIEW_SCREEN'; 
        end
        function setFocusToUnscored(obj, hObject, eventData)
            obj.sessionData.setFocusAsUnscored();
            obj.showResults();
        end
        function setFocusToScored(obj, hObject, eventData)
            obj.sessionData.setFocusAsScored();
            obj.showResults();
        end
        function setFocusToTraining(obj, hObject, eventData)
            obj.sessionData.setFocusAsTraining();
            obj.showResults();
        end
        
        function loadImageWidgets(obj)
            obj.ui.deleteControls(obj.imageControlTags);
            obj.ui.imageNavigationPanel
            import edu.oregonstate.eecs.iis.avatolcv.ui.ImageBrowser;
            imageBrowser = obj.resultMatrixColumn.getActiveImageBrowser();
            imageBrowserHostPanel = imageBrowser.getImageBrowserHostPanel();
            import javax.swing.JTextArea;
            import javax.swing.JTabbedPane;
            import javax.swing.JLabel;
            import java.awt.Color;
            import java.awt.Dimension;
            tabbedPane = JTabbedPane();
            label1 = JLabel('111111111111');
            label2 = JLabel('22222222222222');
            label3 = JLabel('3333333333333333333');
            %tabbedPane.addTab('AAAAAAA', null, label1,'Show training examples for selected taxon');
            %tabbedPane.addTab('BBBBBBB', null, label2,'Show training examples for selected taxon');
            %tabbedPane.addTab('CCCCCCC', null, label3,'Show training examples for selected taxon');

            %textArea = JTextArea('some long text that is taking up space and doesnt know when to end', 10,10);
            %textArea.setBackground(Color.green);
            % Now place this scroll-pane within a Matlab container (figure or panel)
            %[jhScroll,hContainer] = javacomponent(jScrollPane,[10,10,80,65],obj.ui.answerPanel);
            %[jhScroll,hContainer] = javacomponent(jScrollPane,[0.0,0.0,0.9,0.9],obj.ui.answerPanel);
            dimension = Dimension(530,530);
            imageBrowserHostPanel.setPreferredSize(dimension);
            [jhPanel,hContainer] = javacomponent(imageBrowserHostPanel,[0,0,550,550],obj.ui.imageBrowserPanel);
            %imageBrowserHostPanel.revalidate();
            
        end
        function loadImageWidgetsOld(obj)
            fprintf('loadImageWidgets\n');
            obj.ui.deleteControls(obj.imageControlTags);
            %
            %
            prevImage = uicontrol('style', 'pushbutton' ,...
                                         'String', 'Previous Image' ,...
                                         'Enable','off',...
                                         'Units','normalized',...
                                         'position', [0,0,0.4,1] ,...
                                         'FontName', obj.ui.fontname ,...
                                         'FontSize', obj.ui.fontsize ,...
                                         'Parent',obj.ui.imageNavigationPanel,...
                                         'Tag','prevImage'); 
            set(prevImage, 'callback', {@obj.showPrevImage});
            obj.imageControlTags = { 'prevImage' };
            backImageButtonNeeded = obj.sessionData.canGoToPrevImage();
            if backImageButtonNeeded
                set(prevImage,'Enable','on');
            end
            %
            %
            positionInListString = char(obj.sessionData.getPositionInListString());
            positionInList = uicontrol('style', 'text' ,...
                                         'String', positionInListString ,...
                                         'Units','normalized',...
                                         'position', [0.4,0,0.2,0.8] ,...
                                         'FontName', obj.ui.fontname ,...
                                         'FontSize', obj.ui.fontsize ,...
                                         'Tag','positionInList' ,...
                                         'parent',obj.ui.imageNavigationPanel,...
                                         'BackgroundColor', [1 1 1]); 
            obj.imageControlTags = [  obj.imageControlTags , 'positionInList' ];
            %
            %
            nextImage = uicontrol('style', 'pushbutton' ,...
                                         'String', 'Next Image' ,...
                                         'Enable','off',...
                                         'Units','normalized',...
                                         'position', [0.6,0,0.4,1] ,...
                                         'FontName', obj.ui.fontname ,...
                                         'FontSize', obj.ui.fontsize ,...
                                         'Tag','nextImage' ,...
                                         'parent',obj.ui.imageNavigationPanel);   
            %
            %
            imageContextString = char(obj.sessionData.getImageContextString());
            imageContext = uicontrol('style', 'text' ,...
                                         'String', imageContextString ,...
                                         'Units','normalized',...
                                         'position', [0,0,1,1] ,...
                                         'FontName', obj.ui.fontname ,...
                                         'FontSize', obj.ui.fontsize ,...
                                         'Tag','imageContext' ,...
                                         'parent',obj.ui.imageContextPanel,...
                                         'BackgroundColor', [1 1 1]); 
            obj.imageControlTags = [  obj.imageControlTags , 'imageContext' ];   
            
            set(nextImage, 'callback', {@obj.showNextImage});
            obj.imageControlTags = [  obj.imageControlTags , 'nextImage' ];
            nextImageButtonNeeded = obj.sessionData.canGoToNextImage();
            if nextImageButtonNeeded
                set(nextImage,'Enable','on');
            end
            obj.loadImage();
        end
        function generateMatrixColumn(obj)
            resultColumnMatrix = ResultMatrixColumn(obj.session.morphobankBundle, obj.sessionData);
            fprintf('cell count %c', resultColumnMatrix.getCount());
            
        end
       
        function slider_callback1(obj,src,eventdata,arg1)
            val = get(src,'Value');
            yHiddenDistance = obj.heightRatio - 1;
            yPosition =  -yHiddenDistance * val;
            set(arg1,'Position',[0 yPosition 1 obj.matrixHeight])
        end
        function loadMatrixColumn(obj)
            %matrixColumnOuterPanel = uipanel('Background', [0.2 0.9 0.9],...%[1 0.3 0.3]
            %                          'BorderType', 'none',...
            %                          'Tag', 'matrixColumnPanel',...
            %                          'Parent',obj.ui.resultsMiddlePanel,...
            %                          'Position',[0.0,0.0,1.0,0.8]);
            obj.sessionDataForTaxa = obj.ssm.getSessionDataForTaxa(obj.session.morphobankBundle);
            %import edu.oregonstate.eecs.iis.avatolcv.ui.ResultsReviewJavaLayer;
           % resultsReviewJavaLayer = ResultsReviewJavaLayer(sessionDataForTaxa);
            %matrixColumnPanel = resultsReviewJavaLayer.getMatrixColumnPanel();
            %jScrollPane = com.mathworks.mwswing.MJScrollPane(matrixColumnPanel);
            
            import edu.oregonstate.eecs.iis.avatolcv.ui.ResultMatrixColumn;
            obj.resultMatrixColumn = ResultMatrixColumn(obj.session.morphobankBundle, obj.sessionDataForTaxa);
            jScrollPane = com.mathworks.mwswing.MJScrollPane(obj.resultMatrixColumn);
            
            % Now place this scroll-pane within a Matlab container (figure or panel)
            %[jhScroll,hContainer] = javacomponent(jScrollPane,[10,10,80,65],obj.ui.answerPanel);
            %[jhScroll,hContainer] = javacomponent(jScrollPane,[0.0,0.0,0.9,0.9],obj.ui.answerPanel);
            [obj.javaTaxaScrollPane,hContainer] = javacomponent(jScrollPane,[0,0,360,530],obj.ui.resultsMiddlePanel);
            
            slider = obj.resultMatrixColumn.getConfidenceSlider();
            [obj.javaTaxaConfidenceSlider,hContainer] = javacomponent(slider,[0,534,360,70],obj.ui.resultsMiddlePanel);
             
            label = obj.resultMatrixColumn.getConfidenceLabel();
            [obj.javaConfidenceLabel,hContainer] = javacomponent(label,[0,610,360,30],obj.ui.resultsMiddlePanel);
        end
        function loadMetadataWidgets(obj)
            curMetadata = obj.ssm.getDisplayableData();
            obj.ui.deleteControls(obj.metadataControlTags);
            
            obj.loadMatrixColumn();
            
            metadataContent = uicontrol('style', 'text' ,...
                                         'Parent',obj.ui.scoredSetMetadataPanel,...
                                         'Units','normalized',...
                                         'String', char(curMetadata) ,...
                                         'position', [0.00,0.00,1.0,1.0] ,...
                                         'FontName', obj.ui.fontname ,...
                                         'FontSize', obj.ui.fontsize ,...
                                         'Tag','metadataContent' ,...
                                         'Background',[1 1 1],...
                                         'HorizontalAlignment', 'left');%'BackgroundColor', [0.1 1 0.1] ,...
            
            obj.metadataControlTags = { 'metadataContent' };
            nextButtonNeeded = false;
            backButtonNeeded = false;
            if obj.ssm.getSetCount()==1
                % no navigationButtons
            else
                if obj.ssm.backButtonNeeded()
                    backButtonNeeded = true;
                end
                if obj.ssm.nextButtonNeeded()
                    nextButtonNeeded = true;
                end
            end
            
                   
            %
            %
            prev = uicontrol('style', 'pushbutton' ,...
                                         'Enable', 'off',...
                                         'String', 'Previous Run' ,...
                                         'Units','normalized',...
                                         'position', [0,0,0.4,1] ,...
                                         'FontName', obj.ui.fontname ,...
                                         'FontSize', obj.ui.fontsize ,...
                                         'Parent',obj.ui.scoredSetNavigationPanel,...
                                         'Tag','prev'); 
            set(prev, 'callback', {@obj.showPreviousMetadata});
            obj.metadataControlTags = [  obj.metadataControlTags , 'prev' ];
            if backButtonNeeded
                set(prev,'Enable','on');
            end
            %
            %
            runPositionInListString = char(obj.ssm.getPositionInList());
            runPositionInList = uicontrol('style', 'text' ,...
                                         'String', runPositionInListString ,...
                                         'Units','normalized',...
                                         'position', [0.4,0,0.2,0.8] ,...
                                         'FontName', obj.ui.fontname ,...
                                         'FontSize', obj.ui.fontsize ,...
                                         'Tag','runPositionInList' ,...
                                         'parent',obj.ui.scoredSetNavigationPanel,...
                                         'BackgroundColor', [1 1 1]); 
            obj.metadataControlTags = [  obj.metadataControlTags , 'runPositionInList' ];
            %
            %
            next = uicontrol('style', 'pushbutton' ,...
                                         'String', 'Next Run' ,...
                                         'Enable','off',...
                                         'Units','normalized',...
                                         'position', [0.6,0,0.4,1] ,...
                                         'FontName', obj.ui.fontname ,...
                                         'FontSize', obj.ui.fontsize ,...
                                         'Tag','next' ,...
                                         'parent',obj.ui.scoredSetNavigationPanel);   
                
            set(next, 'callback', {@obj.showNextMetadata});
            obj.metadataControlTags = [  obj.metadataControlTags , 'next' ];
            if nextButtonNeeded
                set(next,'Enable','on');
            end
        end
            
        function showNextImage(obj, hObject, eventData)
            obj.sessionData.goToNextImage();
            obj.loadImageWidgets();
        end
        function showPrevImage(obj, hObject, eventData)
            obj.sessionData.goToPrevImage();
            obj.loadImageWidgets();
        end
        function loadImage(obj)
            if not(obj.sessionData.canShowImage())
                return;
            end
            currentFigure = gcf;
            set(currentFigure, 'pointer', 'watch')
            drawnow;
            
            fprintf('loadImage\n');
            
            resultImage = obj.sessionData.getCurrentResultImage();
            mediaPath = char(resultImage.getMediaPath());
            
            axesPanel = uipanel('Parent',obj.ui.imagePanel,...
                             'Tag','imagePanel' ,...
                             'position',[0,0,1,1]);
            axes1 = axes('Parent',axesPanel,...
                             'Color',[1,1,1],...
                             'FontName', obj.ui.fontname ,...
                             'FontSize', obj.ui.fontsize ,...
                             'Tag','resultImage' ,...
                             'position',[0,0,1,1]);%[0.02,0.02,0.96,0.76]
            %obj.ui.activeControlTags = [ obj.ui.activeControlTags,
            %'resultImage' ];
            image = imread(mediaPath);
            [imageHeight, imageWidth, imageDim] = size(image);
            imshow(mediaPath);
            if resultImage.hasAnnotationCoordinates()
                 fprintf('drawingCoords\n');
                 annotationCoordinates = resultImage.getAnnotationCoordinates();
                 %FIXME need to draw multiple coords and lines if needed
                 
                 pointAsPercent = annotationCoordinates.getPoints().get(0);
                 x = pointAsPercent.getXPixel(imageWidth);
                 y = pointAsPercent.getYPixel(imageHeight);
                 hold on;
                 plot(x,y,'r.','MarkerSize',8)
             end
               
             %xlabel(char(resultImage.getCharacterName()));
             set(currentFigure, 'pointer', 'arrow')
        end  
        function showNextMetadata(obj, hObject, eventData)
            %obj.metadataKeyIndex = obj.metadataKeyIndex + 1;
            %obj.updateFolders
            obj.ssm.goToNextSession();
            obj.sessionData = obj.ssm.getSessionResultsData(obj.session.morphobankBundle);
            obj.loadMetadataWidgets();
            obj.loadImageWidgets();
        end
        function showPreviousMetadata(obj, hObject, eventData)
            %obj.metadataKeyIndex = obj.metadataKeyIndex - 1;
            %obj.updateFolders();
            obj.ssm.goToPrevSession();
            obj.sessionData = obj.ssm.getSessionResultsData(obj.session.morphobankBundle);
            obj.loadMetadataWidgets();
            obj.loadImageWidgets();
        end
        function doAnotherCharacter(obj,hObject, eventData)
            delete(obj.javaConfidenceLabel);
            delete(obj.javaTaxaConfidenceSlider);
            delete(obj.javaTaxaScrollPane);
            obj.session.doAnotherCharacter();
        end
        function exit(obj, hobject, eventData)
            obj.session.exit();
        end
    end
    
end

