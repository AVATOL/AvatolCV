ISSUE data files that are passed to and recieved from algorithms

Q. how can we support troubleshooting if someone zips uip a workspace and sends it to me to try to replicate a problem?  The avatol_cv roots won't match and potentially there will be a platform difference.  However, if I'm troubleshooting a failure I will most likely be running on the same plaform that the failure occurred on.


A. At one point, I favored storing all paths in unix format and then changing to windows at runtime as needed.  This would need to be done by my code and by the algorithm code.

I've come to the realization that this is not the best balance for ease of adding algorithms.  Someone trying to add an algorithm to run on windows will see paths that look like C:/foo/bar, and think to themselves "what the heck".  Since most end users will likely live on a single platform, I don't want to push this oddness into windows users faces, and face their scorn.

Where I've landed now, is to use native pathnames.  Then, if faced with a need to troubleshoot something and pull in a zip of someone else's workspace, I can have a conversion tool that makes new versions of the relevant data files that are homed to the local avatol_cv root and have the proper platform convention.  This keeps the special case rigging separate from the main system, which I think is an overall simplicity win.  It will be a bit of work to write/maintain that tool, but I think its the best balance.

Q. should we use absolute paths or relative paths?

A. We don't care about space taken up by absolute pathnames, since we aren't talking a huge amount of data.  However, visual clutter while debugging is an issue.  So, 
-for files that just contain a key/value where the value is a pathname, then use absolute paths.  
-for files that are just a list of image files, use absolute paths
-for files that will need more debugging scrutiny, and the path will share a line with other data, use the approach where a root path is expressed once as the value of a key, and all the other paths are relative to that.  


ISSUE allowing users to provide additional training data to segmentation and orientation

- we support providing optional input using the inputOptional declaration in the algProperties file.  Two examples of this (a proof of concept at this point) are in YaoSeg:

ex. 1  inputOptional:userProvidedGroundTruthImagesFile refsFilesWithSuffix _GT ofType mask_SpecimenGreen_BackgroundBlue_ClutterRed 

        The above says:  add an entry into runConfig with a key called 'userProvidedGroundTruthImagesFile' that has the pathname of a file, which can be an empty file.  If not emtpy, that file will contain the pathnames of files whose name has the suffix _GT (before the file descriptor) and whose substance is described by the type  mask_SpecimenGreen_BackgroundBlue_ClutterRed.  The UI will show an example (from the shipped _GT files) and display a pathname that it created called <somepath>/userProvidedGroundTruthImagesFile that is where the user should put that data manually in order for the system to find it.
        
ex. 2  inputOptional:userProvidedTrainImagesFile refsFilesWithSuffix * ofType rawImage

       The above says:  add an entry into runConfig with a key called 'userProvidedTrainImagesFile' that has the pathname of a file, which can be an empty file.  If not emtpy, that file will contain the pathnames of files whose name has no suffix expectations (before the file descriptor) and whose substance is rawImage.  The UI will display a pathname that it created called <somepath>/userProvidedTrainImagesFile that is where the user should put that data manually in order for the system to find it.

PROBLEM - yaoOrient has two phases, a rotation (to get the leaf along the x axis) and an aligment phase (to get the apex and base positioned consistently. This second phase has a hardcoded convention that the leaf apex will always be to the left in the training data.   Conveying that nuance as a requirement in algProperties was too tricky to bother with (and so bound to the domain) that I decided to not support user-provided training data at this time for yaoOrient.

